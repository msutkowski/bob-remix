Mix.install([
  {:ecto_sql, "~> 3.0"},
  {:postgrex, ">= 0.0.0"}
])

defmodule BobRoss.Repo do
  use Ecto.Repo,
    otp_app: :bob_ross,
    adapter: Ecto.Adapters.Postgres

  def init(_type, config) do
    config =
      config
      |> Keyword.put(:database, "bob_ross_dev")
      |> Keyword.put(:username, "postgres")
      |> Keyword.put(:password, "postgres")
      |> Keyword.put(:hostname, "localhost")

    {:ok, config}
  end

  def truncate(schema) do
    table_name = schema.__schema__(:source)
    {:ok, _} = query("TRUNCATE #{table_name} CASCADE", [])
  end
end

BobRoss.Repo.start_link()

defmodule BobRoss.Art.Artist do
  use Ecto.Schema

  alias BobRoss.Art.Painting

  schema "artists" do
    field(:name, :string)

    has_many(:paintings, Painting)
  end
end

defmodule BobRoss.Art.Color do
  use Ecto.Schema

  schema "colors" do
    field(:aliases, {:array, :string})
    field(:hex, :string)
    field(:name, :string)
    field(:url, :string)
  end
end

defmodule BobRoss.Shows.Episode do
  use Ecto.Schema

  alias BobRoss.Art.Painting
  alias BobRoss.Shows.Season

  schema "episodes" do
    field(:index, :integer)
    field(:premier_date, :date)
    field(:duration, :time)
    field(:summary, :string)
    field(:url, :string)

    belongs_to(:season, Season)
    has_one(:painting, Painting)
  end
end

defmodule BobRoss.Art.PaintingColor do
  use Ecto.Schema

  alias BobRoss.Art.{Painting, Color}

  schema "paintings_colors" do
    belongs_to(:painting, Painting)
    belongs_to(:color, Color)
  end
end

defmodule BobRoss.Art.PaintingTool do
  use Ecto.Schema

  alias BobRoss.Art.{Painting, Tool}

  schema "paintings_colors" do
    belongs_to(:painting, Painting)
    belongs_to(:tool, Tool)
  end
end

defmodule BobRoss.Art.Painting do
  use Ecto.Schema

  alias BobRoss.Shows.Episode
  alias BobRoss.Art.{Artist, Tool, Color}

  schema "paintings" do
    field(:title, :string)

    # Almost always 18 x 24
    field(:height, :integer, default: 18)
    field(:width, :integer, default: 24)

    # Usually a double primed stretched white canvas
    field(:canvas, :string, default: "white")

    belongs_to(:episode, Episode)
    belongs_to(:artist, Artist)

    many_to_many(:tools, Tool, join_through: "paintings_tools")
    many_to_many(:colors, Color, join_through: "paintings_colors")
  end
end

defmodule BobRoss.Shows.Season do
  use Ecto.Schema

  alias BobRoss.Shows.Episode

  schema "seasons" do
    field(:index, :integer)
    has_many(:episodes, Episode)
  end
end

defmodule BobRoss.Art.Tool do
  use Ecto.Schema

  schema "tools" do
    field(:name, :string)
    field(:url, :string)
  end
end

defmodule Main do
  import Ecto.Query

  alias BobRoss.Shows.Season

  def main() do
    query =
      from(s in Season,
        join: e in assoc(s, :episodes),
        join: p in assoc(e, :painting),
        join: a in assoc(p, :artist),
        join: t in assoc(p, :tools),
        join: c in assoc(p, :colors),
        join: sz in assoc(e, :season),
        preload: [episodes: {e, season: sz, painting: {p, artist: a, tools: t, colors: c}}],
        order_by: [s.index, e.index, t.name, c.name]
      )

    seasons =
      query
      |> BobRoss.Repo.all()
      |> Enum.map(&render_season/1)
      |> Enum.join(", ")

    output = """
    // Generated by other scripts
    import { Season } from './types';

    export function getSeasons() {
      const seasons: Season[] = [
        #{seasons}
      ]

      return seasons;
    }
    """

    File.write("./app/data.ts", output)
    System.cmd("npx", ["prettier", "app/data.ts", "--write"])
  end

  defp render_season(season) do
    episodes = Enum.map(season.episodes, &render_episode/1)

    """
    {
      index: #{season.index}
      , episodes: [
        #{Enum.join(episodes, ",")}
      ]
    }
    """
  end

  defp render_episode(episode) do
    painting = render_painting(episode.painting)

    """
    {
      index: #{episode.index}
      , premier_date: "#{episode.premier_date}"
      , duration: "#{episode.duration}"
      , summary: `#{String.replace(episode.summary, ~s(`), ~s(\\`))}`
      , url: "#{episode.url}"
      , seasonId: #{episode.season.index}
      , painting: #{painting}
    }
    """
  end

  defp render_painting(painting) do
    artist = render_artist(painting.artist)
    tools = Enum.map(painting.tools, &render_tool/1)
    colors = Enum.map(painting.colors, &render_color/1)

    """
    { title: "#{painting.title}"
    , height: #{painting.height}
    , width: #{painting.width}
    , canvas: "#{painting.canvas}"
    , episodeId: #{painting.episode_id}
    , artist: #{artist}
    , tools: [
        #{Enum.join(tools, ",")}
      ]
    , colors: [
        #{Enum.join(colors, ",")}
      ]
    }
    """
  end

  defp render_artist(artist) do
    """
    {
      name: "#{artist.name}"
    }
    """
  end

  defp render_color(color) do
    """
    {
      hex: "#{color.hex}"
      , name: "#{color.name}"
      , url: "#{color.url}"
    }
    """
  end

  defp render_tool(tool) do
    """
    {
      name: "#{tool.name}",
      url: "#{tool.url}"
    }
    """
  end
end

Main.main()
